Index: Bank_software.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Bank:\r\n    def __init__(self):\r\n        self.bankname = {}\r\n        self.employee = {}\r\n\r\n    def add_new_bank(self, bank_name):\r\n        self.bankname[bank_name] = []\r\n\r\n    def add_employee(self, employee_name, age, bank_name):\r\n        if bank_name in self.bankname:\r\n            self.employee[employee_name] = {'age': age, 'bank': bank_name}\r\n            self.bankname[bank_name].append(employee_name)\r\n        else:\r\n            print(f\"Bank '{bank_name}' does not exist.\")\r\n\r\n    def check_bank(self, bank_name):\r\n        if bank_name not in self.bankname:\r\n            create = input(f\"Bank '{bank_name}' does not exist. Do you want to create it? (yes/no): \")\r\n            if create.lower() == 'yes':\r\n                self.add_new_bank(bank_name)\r\n\r\n    def check_employee(self, employee_name):\r\n        if employee_name not in self.employee:\r\n            create = input(f\"Employee '{employee_name}' does not exist. Do you want to add them? (yes/no): \")\r\n            if create.lower() == 'yes':\r\n                age = int(input(\"Enter employee's age: \"))\r\n                self.add_employee(employee_name, age)\r\n\r\n    def del_bank(self, bank_name):\r\n        if bank_name in self.bankname:\r\n            del self.bankname[bank_name]\r\n            print(f\"Bank '{bank_name}' deleted.\")\r\n\r\n    def del_employee(self, employee_name):\r\n        if employee_name in self.employee:\r\n            del self.employee[employee_name]\r\n            print(f\"Employee '{employee_name}' deleted.\")\r\n\r\n    def list_banks(self, customer_obj):\r\n        print(\"List of Banks and Employees:\")\r\n        for bank, employees in self.bankname.items():\r\n            print(f\"- {bank}\")\r\n            if employees:\r\n                print(\"  Employees:\")\r\n                for emp in employees:\r\n                    print(f\"    - {emp}, Age: {self.employee[emp]['age']}\")\r\n            else:\r\n                print(\"  No employees in this bank.\")\r\n\r\n            # Display customers assigned to this bank\r\n            assigned_customers = [cust for cust, details in customer_obj.customers.items() if details['bank'] == bank]\r\n            if assigned_customers:\r\n                print(\"  Customers:\")\r\n                for cust_id in assigned_customers:\r\n                    print(f\"    - ID: {cust_id}, Name: {customer_obj.customers[cust_id]['name']}, Age: {customer_obj.customers[cust_id]['age']}\")\r\n            else:\r\n                print(\"  No customers assigned to this bank.\")\r\n\r\n\r\n    def list_employees(self):\r\n        print(\"List of Employees:\")\r\n        for emp, age in self.employee.items():\r\n            print(f\"- {emp}, Age: {age}\")\r\n\r\n\r\nclass Customer:\r\n    def __init__(self):\r\n        self.customers = {}\r\n\r\n    def last_cust_id(self):\r\n        return max(self.customers.keys()) if self.customers else 0\r\n\r\n    def add_customer(self, cust_name, age):\r\n        last_id = self.last_cust_id()\r\n        self.customers[last_id + 1] = {'name': cust_name, 'age': age, 'bank': None}\r\n\r\n    def assign_bank(self, cust_id, bank_name):\r\n        if cust_id in self.customers:\r\n            self.customers[cust_id]['bank'] = bank_name\r\n            print(f\"Bank '{bank_name}' assigned to customer ID '{cust_id}'.\")\r\n\r\n    def del_customer(self, cust_id):\r\n        if cust_id in self.customers:\r\n            del self.customers[cust_id]\r\n            print(f\"Customer with ID '{cust_id}' deleted.\")\r\n\r\n    def list_customers(self):\r\n        print(\"List of Customers:\")\r\n        for cust_id, details in self.customers.items():\r\n            bank = details['bank'] if details['bank'] else \"Not assigned\"\r\n            print(f\"- ID: {cust_id}, Name: {details['name']}, Age: {details['age']}, Bank: {bank}\")\r\n\r\n\r\n\r\n# Sample usage:\r\n# bank = Bank()\r\n# bank.add_new_bank('Bank A')\r\n# bank.add_employee('John Doe', 30)\r\n# bank.list_banks()\r\n# bank.list_employees()\r\n\r\n# customer = Customer()\r\n# customer.add_customer('Alice', 25)\r\n# customer.add_customer('Bob', 35)\r\n# customer.list_customers()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bank_software.py b/Bank_software.py
--- a/Bank_software.py	(revision efea9aa92d4cba36d3ddc6fd0ea89484aa41ec1d)
+++ b/Bank_software.py	(date 1702054640988)
@@ -88,18 +88,4 @@
         print("List of Customers:")
         for cust_id, details in self.customers.items():
             bank = details['bank'] if details['bank'] else "Not assigned"
-            print(f"- ID: {cust_id}, Name: {details['name']}, Age: {details['age']}, Bank: {bank}")
-
-
-
-# Sample usage:
-# bank = Bank()
-# bank.add_new_bank('Bank A')
-# bank.add_employee('John Doe', 30)
-# bank.list_banks()
-# bank.list_employees()
-
-# customer = Customer()
-# customer.add_customer('Alice', 25)
-# customer.add_customer('Bob', 35)
-# customer.list_customers()
+            print(f"- ID: {cust_id}, Name: {details['name']}, Age: {details['age']}, Bank: {bank}")
\ No newline at end of file
Index: menu.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from bank import bank\r\n\r\ndef system_load(self): # load data from text file (load function is in bank class)\r\n    pass\r\ndef system_save(self): # save data to text file (save function is in bank class)\r\n    pass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/menu.py b/menu.py
--- a/menu.py	(revision efea9aa92d4cba36d3ddc6fd0ea89484aa41ec1d)
+++ b/menu.py	(date 1702054648453)
@@ -1,6 +1,13 @@
-from bank import bank
+from Bank_software import Bank, Customer
 
-def system_load(self): # load data from text file (load function is in bank class)
-    pass
-def system_save(self): # save data to text file (save function is in bank class)
-    pass
\ No newline at end of file
+# Sample usage:
+# bank = Bank()
+# bank.add_new_bank('Bank A')
+# bank.add_employee('John Doe', 30)
+# bank.list_banks()
+# bank.list_employees()
+
+# customer = Customer()
+# customer.add_customer('Alice', 25)
+# customer.add_customer('Bob', 35)
+# customer.list_customers()
\ No newline at end of file
Index: bank.py
===================================================================
diff --git a/bank.py b/bank.py
deleted file mode 100644
--- a/bank.py	(revision efea9aa92d4cba36d3ddc6fd0ea89484aa41ec1d)
+++ /dev/null	(revision efea9aa92d4cba36d3ddc6fd0ea89484aa41ec1d)
@@ -1,100 +0,0 @@
-def add(self, key, value):  # this just adds a key and a value to a dictonary
-    self[key] = value
-
-
-class bank():
-    def __init__(self):  # this defines lists
-        self.banknames = {}  # bankNames, employees list, customer list
-        self.employees = {}  # employeeName, bankName Where employee is working - this is (probably) where tech support is
-
-    def add_new_bank(self, user_input = None):  # record new bank to bankname list
-        while user_input is None:
-            user_input = input("Name of the bank: ")
-            if user_input not in self.banknames:
-                self.banknames.add(user_input, None)
-            else:
-                user_input = None
-
-    def rename_bank(self, user_input = None):  # record new bank to bankname list
-        while user_input is None:
-            user_input = input("Name of the bank: ")
-            if user_input not in self.banknames:
-                self.banknames.add(user_input, None)
-            else:
-                user_input = None
-
-    def check_bank_name(self):  # search for bank in bankname
-        user_input = input("Type in the name of the bank you're searching for: ")
-        return True if user_input in self.banknames else False, user_input
-
-    def check_employee_name(self):  # search for employee in employees
-        user_input = input("Type in the name of the employee you're searching for: ")
-        return True if user_input in self.employees.keys() else False, user_input
-
-    def addEmployee(self, user_input = None):  # new employee recording
-        while user_input is None:
-            user_input = input("Name of the bank where you want to record the employee: ")
-            if user_input in self.banknames:
-                bank = user_input
-            else:
-                user_input = None
-        while user_input is None:
-            user_input = input("Name of the employee: ")
-            if user_input not in self.employees:
-                self.employees.add(user_input, bank)
-            else:
-                user_input = None
-
-    def smart_check_bank(self, get = True, user_input = None):  # function checks if bank doesn't exist in bankname and gives you the
-        # chance to record it
-        while get:
-            question = input("Would you like to record a new bank?[y/n]: ")
-            if question.lower() is "y":
-                self.banknames.add(user_input, None)
-            else:
-                question = input("Are you sure?[y/n]: ")
-                if question.lower() is "y":
-                    get = False
-
-
-
-    def smart_bankoffice_del(self, get = True, user_input = None):  # searches for and deletes bank office, it's smart because it searches
-        while get:
-            question = input("Would you like to record a new bank?[y/n]: ")
-            if question.lower() is "y":
-                self.banknames.add(user_input, None)
-            else:
-                question = input("Are you sure?[y/n]: ")
-                if question.lower() is "y":
-                    get = False
-    def bankoffice_list(self):  # lists bankoffices
-        print(self.employees.keys())
-
-    def save(self):  # probably doesn't work
-        f = open('save.txt', 'r')
-        f.write(f"{self.banknames} \nself.bankoffices")
-        f.close()
-
-    def load(self):  # probably doesn't work
-        f = open('save.txt', 'r')
-        for sor in range(len(f)):
-            data = [self.banknames, self.employees]
-            data[sor] = f.readlines[sor]
-            f.close()
-
-class customer():
-    def __init__(self):  # this function was made for list_customer function
-        self.customers = {}
-
-    def last_id(self):  # I don't know what this does or why this was created but it needs to be called in self.customers
-        pass
-
-    def add_customer(self):  # add new customer to customer list
-        user_input = None
-        while user_input is None:
-            user_input = input("Type in a name of the office: ")
-            if user_input in self.customers:
-                return user_input  # needs to appended in self
-
-    def list_customer(self):  # lists customers from self
-        print(self.customers)
\ No newline at end of file
